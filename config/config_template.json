{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": ["# 1. Configuration Settings\n", "^^^timestamp^^^"]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#@title Default Everything {display-mode: \"form\"} \n",
        "\n",
        "Default_Everything = True #@param {type:\"boolean\"}"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": ["## Miscellaneous\n"]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#@title Default Misc {display-mode: \"form\"} \n",
        "Default_Misc = True #@param {type:\"boolean\"}\n"
      ],
      "execution_count": 1,
      "outputs": []
    },
    "^^^misc^^^",
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Sim Settings\n",
        "configure how the trade simulation works with the following parameters"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#@title Default Sim Settings {display-mode: \"form\"} \n",
        "Default_Sim_Settings = True #@param {type:\"boolean\"}\n"
      ],
      "execution_count": 1,
      "outputs": []
    },
    "^^^sim_settings^^^",
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": ["## Order Conditions\n", "\n"]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#@title Default Order Conditions {display-mode: \"form\"} \n",
        "Default_Order_Conditions = True #@param {type:\"boolean\"}\n"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": ["### Buy Conditions\n"]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#@title Default Buy Conditions {display-mode: \"form\"} \n",
        "Default_Buy_Conditions = True #@param {type:\"boolean\"}\n"
      ],
      "execution_count": 1,
      "outputs": []
    },
    "^^^buy_conds^^^",
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": ["### Sell Conditions\n"]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#@title Default Sell Conditions {display-mode: \"form\"} \n",
        "Default_Sell_Conditions = True #@param {type:\"boolean\"}\n"
      ],
      "execution_count": 1,
      "outputs": []
    },
    "^^^sell_conds^^^",
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# 2. Assemble Data\n",
        "\n",
        "Here is where the settings above are formatted into a config file that will be ready for use in the batch test. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": ["## Format Into Dictionaries\n"]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "defaults = {\n",
        "    'everything': Default_Everything,\n",
        "    'misc': Default_Misc,\n",
        "    'sim_settings': Default_Sim_Settings,\n",
        "    'order_conditions': Default_Order_Conditions,\n",
        "    'sell_conditions': Default_Sell_Conditions,\n",
        "    'buy_conditions': Default_Buy_Conditions,\n",
        "}"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "buy_conditions = {\n",
        "    'drop_below_average' :drop_below_average_params,\n",
        "    'aggresive_average' :aggresive_average_params,\n",
        "}\n",
        "\n",
        "sell_conditions = {\n",
        "    'dollar_risk_check':dollar_risk_check_params,\n",
        "    'timed_exit':timed_exit_params,\n",
        "    'exposure_over_account_limit':exposure_over_account_limit_params,\n",
        "    'percentage_gain':percentage_gain_params,\n",
        "    'target_unreal':target_unreal_params,\n",
        "}\n",
        "\n",
        "master_dict = {\n",
        "    'misc': misc_params,\n",
        "    'sim_settings': sim_settings_params,\n",
        "    'order_conditions': {'buy_conditions':buy_conditions, 'sell_conditions':sell_conditions},\n",
        "}"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": ["## Pull Default Config From Github"]
    },

    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "!pip install pygithub\n",
        "from github import Github\n",
        "\n",
        "user, pasw = 'dcorso21', 'PFgyMWEVJQnZzu2'\n",
        "g = Github(user, pasw)\n",
        "\n",
        "for repo in g.get_user().get_repos():\n",
        "    if str(repo) == 'Repository(full_name=\"dcorso21/algo_config\")':\n",
        "        break \n",
        "\n",
        "content = repo.get_contents(\"default_config.json\")\n",
        "import json\n",
        "def_master = json.loads(content.decoded_content)\n",
        "\n"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": ["## Overwrite Values from Default Config"]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "\n",
        "for field in defaults.keys():\n",
        "    if defaults[field] == True:\n",
        "        if field == 'everything':\n",
        "            master_dict = def_master\n",
        "            print(f'{field} defaulted')\n",
        "            break\n",
        "\n",
        "        elif field in master_dict.keys():\n",
        "            master_dict[field] = def_master[field]\n",
        "            print(f'{field} defaulted')\n",
        "            continue\n",
        "        \n",
        "        else:\n",
        "            for category in master_dict.keys():\n",
        "                if field in master_dict[category]:\n",
        "                    master_dict[category][field] = def_master[category][field]\n",
        "                    print(f'{field} defaulted')\n"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": ["# 3. Upload New Configuration to Github"]
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import datetime\n",
        "import pytz\n",
        "\n",
        "# getting timestamp for name\n",
        "tz = pytz.timezone('US/Eastern')\n",
        "timestamp = datetime.datetime.now(tz = tz)\n",
        "timestamp = timestamp.strftime(r'%m-%d-%Y_%I:%M_%p')\n",
        "# creating name for json\n",
        "name = input('Configuration Name:')\n",
        "date, time = timestamp.replace('_',' ').split(' ',1)\n",
        "# converting to json string\n",
        "metadata = {\n",
        "    'name': name,\n",
        "    'date': date,\n",
        "    'time': time,\n",
        "}\n",
        "new_config = {\n",
        "    'metadata': metadata,\n",
        "    'defaults': defaults,\n",
        "    'master': master_dict,\n",
        "}\n",
        "\n",
        "new_config = json.dumps(new_config, indent=4, sort_keys=True)\n",
        "\n",
        "\n",
        "name = f'{timestamp}_{name}.json'\n",
        "\n",
        "# creating file on Github\n",
        "repo.create_file(f\"created/{name}\", \"created new config\", new_config, branch=\"master\")\n",
        "print(new_config)\n"
      ],
      "execution_count": 1,
      "outputs": []
    }
  ],
  "metadata": {
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": 3
    },
    "orig_nbformat": 2
  },
  "nbformat": 4,
  "nbformat_minor": 2
}
